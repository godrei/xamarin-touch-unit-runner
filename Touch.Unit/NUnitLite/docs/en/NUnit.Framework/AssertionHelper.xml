<Type Name="AssertionHelper" FullName="NUnit.Framework.AssertionHelper">
  <TypeSignature Language="C#" Value="public class AssertionHelper : NUnit.Framework.Constraints.ConstraintFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AssertionHelper extends NUnit.Framework.Constraints.ConstraintFactory" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.Constraints.ConstraintFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of
            <see cref="T:NUnit.Framework.Is" />, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssertionHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(class NUnit.Framework.TestDelegate code, class NUnit.Framework.Constraints.IResolveConstraint constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate to be executed</param>
        <param name="constraint">A ThrowsConstraint used in the test</param>
        <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />. Works Identically to
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (object actual, NUnit.Framework.Constraints.IResolveConstraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(object actual, class NUnit.Framework.Constraints.IResolveConstraint constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="constraint">A Constraint to be applied</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />. Works Identically to
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (object actual, NUnit.Framework.Constraints.IResolveConstraint constraint, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(object actual, class NUnit.Framework.Constraints.IResolveConstraint constraint, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="constraint">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public void Expect (object actual, NUnit.Framework.Constraints.IResolveConstraint constraint, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expect(object actual, class NUnit.Framework.Constraints.IResolveConstraint constraint, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="constraint">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
